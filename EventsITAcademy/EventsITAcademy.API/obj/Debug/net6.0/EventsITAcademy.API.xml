<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EventsITAcademy.API</name>
    </assembly>
    <members>
        <member name="M:EventsITAcademy.API.Controllers.AdminController.GetAllUnconfirmed(System.Threading.CancellationToken)">
            <summary>
            Returns list of unconfirmed events
            </summary>
            <param name="cancellationToken"></param>
            <returns>list of events</returns>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.AdminController.ActivateEvent(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Markes event as active
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns>Returns id of the activted event</returns>
            <response code="200">Successfully activated event</response>
            <response code="404">If the event was not found</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.AdminController.ArchiveEvent(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Markes event as archived
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns>Returns id of the archived event</returns>
            <response code="200">Successfully archived event</response>
            <response code="404">If the event was not found</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.AdminController.GetAllArchivedAsync(System.Threading.CancellationToken)">
            <summary>
            Returns list of archived events
            </summary>
            <param name="cancellationToken"></param>
            <returns>list of archived events</returns>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.AdminController.UpdateEvent(System.Threading.CancellationToken,EventsITAcademy.Application.Events.Requests.AdminUpdateEventRequestModel)">
            <summary>
            Updated event
            </summary>
            <param name="eventRequest"></param>
            <param name="cancellationToken"></param>
            <returns>Returns id of the updated event</returns>
            <response code="200">Successfully updated event</response>
            <response code="404">If the event was not found</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.AdminController.DeleteAsync(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Deletes event
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns>Returns id of the deleted event</returns>
            <response code="200">Successfully deleted event</response>
            <response code="404">If the event was not found</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.AdminController.GetAllUsersAsync(System.Threading.CancellationToken)">
            <summary>
            returns list of users
            </summary>
            <param name="cancellation"></param>
            <returns>Returns newly created user data</returns>
            <response code="200">Returns list of users</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.AdminController.AssignRole(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Assignes role to the user
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns>Returns id of the archived event</returns>
            <response code="200">Successfully archived event</response>
            <response code="404">If the event or user was not found</response>
            <response code="409">If the user is already assigned to the role</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.AdminController.DeleteUser(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the user
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns>Returns id of the archived event</returns>
            <response code="200">Successfully deleted user</response>
            <response code="404">If the user was not found</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.EventController.Get(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Returns event based on provided id, Authorization is not required
            </summary>
            <param name="cancellationToken"></param>
            <param name="id"></param>
            <returns>Return specific event</returns>
            <response code="200">Returns the specific event</response>
            <response code="404">If the event was not found</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.EventController.GetAll(System.Threading.CancellationToken)">
            <summary>
            Returns list of events
            </summary>
            <param name="cancellationToken"></param>
            <returns>list of events</returns>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.EventController.Post(System.Threading.CancellationToken,EventsITAcademy.Application.Events.Requests.EventRequestModel)">
            <summary>
            Creates an event
            </summary>
            <remarks>
            Note id is not required
            </remarks>
            <param name="cancellationToken"></param>
            <param name="request"></param>
            <returns>Returns updated todo with subtasks</returns>
            <response code="200">Returns newly created event's Id</response>
            <response code="400">Invalid request</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.EventController.Put(System.Threading.CancellationToken,EventsITAcademy.Application.Events.Requests.UpdateEventRequestModel,System.Int32)">
            <summary>
            Updates event
            </summary>
            <remarks>
            
            PUT/event
            
             {
                "id": 1,
                "title": "Event",
                "description": "Updated desc",
                "startDate": "2023-03-T16:39:06.224Z",
                "finishDate": "2023-03-13T16:39:06.224Z",
                "numberOfTickets": 30,
                "modificationPeriod": 1
             }
            </remarks>
            <param name="cancellationToken"></param>
            <param name="request"></param>
            <param name="id"></param>
            <returns>Returns newly created event's id</returns>
            <response code="200">Returns updated event's id</response>
            <response code="400">Invalid request</response>
            <response code="404">If the event was not found</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.TicketController.Reserve(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Endpoint to reserve the ticket
            </summary>
            <remarks>
            Note id is not required
            </remarks>
            <param name="cancellationToken"></param>
            <param name="request"></param>
            <returns>Returnes reserved ticket</returns>
            <response code="200">Returns newly created ticket</response>
            <response code="400">Invalid request</response>
            <response code="404">If the event or user was not found</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.TicketController.Buy(System.Threading.CancellationToken,System.Int32)">
            <summary>
            Endpoint to buy the ticket
            </summary>
            <remarks>
            Note id is not required
            </remarks>
            <param name="cancellationToken"></param>
            <param name="request"></param>
            <returns>Returns bought ticket</returns>
            <response code="200">Returns bought ticket</response>
            <response code="400">Invalid request</response>
            <response code="404">If the event or user was not found</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.UserController.Register(System.Threading.CancellationToken,EventsITAcademy.Application.Users.Requests.CreateUserRequestModel)">
             <summary>
             registers user with provided username and password
             </summary>
             <remarks>
             Note id is not required
            
                 POST/User
                 
                  {
                     "username": "ExampleUser",
                     "email": "exampleuser@gmail.com",
                     "password": "ExamplePassword"
                  }   
             </remarks>
             <param name="cancellation"></param>
             <param name="user"></param>
             <returns>Returns newly created user data</returns>
             <response code="200">Returns new user</response>
             <response code="400">Invalid request coming from user</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.UserController.LogIn(System.Threading.CancellationToken,EventsITAcademy.Application.Users.Requests.LoginUserRequestModel)">
             <summary>
             logs in the user with provided username and password
             </summary>
             <remarks>
             Note id is not required
            
                 POST/User
                 
                  {
                     "email": "exampleuser@gmail.com",
                     "password": "ExamplePassword"
                  }   
             </remarks>
             <param name="cancellation"></param>
             <param name="request"></param>
             <returns>Returns user details and jwt token after the user has successfully logged into the system</returns>
             <response code="200">Returns user and jwt token</response>
             <response code="400">Invalid request coming from user</response>
             <response code="401">If user login failed</response>
        </member>
        <member name="M:EventsITAcademy.API.Controllers.UserController.GetUserEvents(System.Threading.CancellationToken)">
            <summary>
            Returns list of user's events
            </summary>
            <param name="cancellationToken"></param>
            <returns>list of user's events</returns>
            <returns status="200">user's events</returns>
            <returns status="404">If the user was not found</returns>
        </member>
        <member name="T:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.DescMaxLength">
            <summary>
              Looks up a localized string similar to Description can not be be empty and should consist of at most 350 characters.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.EmailRequired">
            <summary>
              Looks up a localized string similar to Email address is a required field.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.EventTitleLength">
            <summary>
              Looks up a localized string similar to Event title should not be empty and should consist of at most 100 characters.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.FinishDateGreaterThanNow">
            <summary>
              Looks up a localized string similar to The end date and time of the event should be greater than the current time.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.InvalidEmail">
            <summary>
              Looks up a localized string similar to Invalid email format.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.ModificationPeriodRequired">
            <summary>
              Looks up a localized string similar to Modification period is required field.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.NumberOfTicketsRequired">
            <summary>
              Looks up a localized string similar to Number of tickets field is mandatory and must be greater than 0.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.PasswordLength">
            <summary>
              Looks up a localized string similar to Password is a required field and the length should be between 6 and 30.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.ReservationPeriodRequired">
            <summary>
              Looks up a localized string similar to Reservation period is required field.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.StartDateGreaterThanNow">
            <summary>
              Looks up a localized string similar to The start date and time of the event should be greater than the current time.
            </summary>
        </member>
        <member name="P:EventsITAcademy.API.Infrastructure.Localizations.ValidationErrorMessages.UsernameLength">
            <summary>
              Looks up a localized string similar to Username is a required field and should not exceed 256 characters.
            </summary>
        </member>
    </members>
</doc>
